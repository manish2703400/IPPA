# -*- coding: utf-8 -*-
"""IPPA_FINAL_PROJECT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GRTA-jbukHBCCR5mLWdoi2F18ma2dvMR

**LIBRARIES IMPORTED**
"""

import numpy as np
import cv2
import PIL
import skimage as ski
import pandas as pd
import seaborn as sns

"""**IMPORT IMAGE**"""

from PIL import Image
import io
import seaborn as sns
import matplotlib.pyplot as plt



st.title("Image Upload and Display")

# Upload an image using Streamlit's uploader
uploaded_file = st.file_uploader("Upload an image", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Open the image using PIL
    image = Image.open(uploaded_file)

    # Display the image
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # Optional: Display using matplotlib if needed
    st.write("Matplotlib view:")
    fig, ax = plt.subplots()
    ax.imshow(image)
    ax.axis('off')
    st.pyplot(fig)

""" **LOG TRANSFORMATION**"""

from PIL import Image
import matplotlib.pyplot as plt

image_gray = image.convert("L")


img_np = np.array(image_gray)


c = (255 / np.log(1 + np.max(img_np)))


log_image = c * np.log(1 + img_np)


log_image = np.array(log_image, dtype=np.uint8)


plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.imshow(img_np, cmap='gray')
plt.title("Original Image", fontsize=14)
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(log_image, cmap='gray')
plt.title("Log Transformed Image", fontsize=14)
plt.axis('off')

plt.show()

"""**HISTOGRAM AND ITS EQUALIZATION**"""

equalized_img = cv2.equalizeHist(img_np)


plt.figure(figsize=(14, 6))


plt.subplot(2, 2, 1)
plt.imshow(img_np, cmap='gray')
plt.title("Original Image")
plt.axis('off')


plt.subplot(2, 2, 2)
plt.hist(img_np.ravel(), bins=256, range=(0, 256), color='blue', alpha=0.7)
plt.title("Original Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")


plt.subplot(2, 2, 3)
plt.imshow(equalized_img, cmap='gray')
plt.title("Equalized Image")
plt.axis('off')


plt.subplot(2, 2, 4)
plt.hist(equalized_img.ravel(), bins=256, range=(0, 256), color='green', alpha=0.7)
plt.title("Equalized Histogram")
plt.xlabel("Pixel Intensity")
plt.ylabel("Frequency")

plt.tight_layout()
plt.show()

"""**IMAGE ROTATION**"""

angle = 60

rotated_image = image.rotate(angle, expand=False)

plt.figure(figsize=(10, 5))

plt.subplot(1, 2, 1)
plt.imshow(image)
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 2, 2)
plt.imshow(rotated_image)
plt.title(f"Rotated Image ({angle}Â°)")
plt.axis("off")

plt.tight_layout()
plt.show()

"""**SHEARING**"""

img_color = image.convert("RGB")

img_np_1 = np.array(img_color)

rows, cols, ch = img_np_1.shape


shear_factor = 0.3


shear_matrix_horizontal= np.float32([[1, shear_factor, 0], [0, 1, 0]])

shear_matrix_vertical = np.float32([[1, 0, 0], [shear_factor, 1, 0]])


new_cols = int(cols + shear_factor * rows)

new_rows = int(rows + shear_factor* cols)


sheared_img_horizontal = cv2.warpAffine(img_np_1, shear_matrix_horizontal, (new_cols, rows))

sheared_img_vertical = cv2.warpAffine(img_np_1, shear_matrix_vertical, (cols, new_rows))

plt.figure(figsize=(12, 5))

plt.subplot(1, 3, 1)
plt.imshow(image)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(sheared_img_horizontal)
plt.title("Sheared Image 1")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(sheared_img_vertical)
plt.title("Sheared Image 2")
plt.axis('off')

plt.tight_layout()
plt.show()

"""**SHARPENING (LAPLACIAN FILTER)**"""

img_g_array = np.array(image_gray)


laplacian = cv2.Laplacian(img_g_array, ddepth=cv2.CV_64F)


laplacian_uint8 = cv2.convertScaleAbs(laplacian)


sharpened = cv2.addWeighted(src1=img_g_array, alpha=1.0,src2=laplacian_uint8, beta=1.0, gamma=0)


plt.figure(figsize=(15, 5))

plt.subplot(1, 3, 1)

plt.imshow(image, cmap='gray')
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(laplacian_uint8, cmap='gray')
plt.title("Laplacian Filter")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(sharpened, cmap='gray')
plt.title("Sharpened Image")
plt.axis('off')

plt.tight_layout()
plt.show()

"""**GAUSSIAN NOISE BLURRING**"""

blurred_img_X = cv2.GaussianBlur(img_np_1, ksize=(25, 25), sigmaX=0)

blurred_img_y = cv2.GaussianBlur(img_np_1, ksize=(25, 25), sigmaX=0, sigmaY=0)

plt.figure(figsize=(12, 5))

plt.subplot(1, 3, 1)
plt.imshow(img_np_1)
plt.title("Original Image")
plt.axis('off')

plt.subplot(1, 3, 2)
plt.imshow(blurred_img_X)
plt.title("Gaussian Blurred Image 1")
plt.axis('off')

plt.subplot(1, 3, 3)
plt.imshow(blurred_img_y)
plt.title("Gaussian Blurred Image 2")
plt.axis('off')


plt.tight_layout()
plt.show()

"""**STREAMLIT CONNECTION**"""
